@tool("trend_analysis_tool", return_direct=True)
def trend_analysis_tool(topic: str, timeframe: str = "2015-2025", k: int = 5) -> str:
    """
    Detects temporal or progression trends related to a given topic.

    Steps:
      1. Retrieves top-k documents from PGVector for the topic.
      2. Extracts any year or date patterns in text.
      3. Asks LLM to infer direction (rising/falling/stable), drivers, and implications.

    Args:
        topic (str): Subject to analyze for trends.
        timeframe (str): Optional reference range (e.g. "2015-2025").
        k (int): Number of top docs to inspect.

    Returns:
        str: Structured trend analysis summary.
    """

    # --- Step 1: Retrieve evidence ---
    docs = vector_store.similarity_search(topic, k=k)
    text_data = "\n".join([d.page_content[:500] for d in docs])

    # --- Step 2: Find temporal cues (years, dates) ---
    years = sorted(set(re.findall(r"(?:19|20)\d{2}", text_data)))
    years_str = ", ".join(years) if years else "No explicit years found"

    # --- Step 3: LLM reasoning on temporal evolution ---
    prompt = f"""
    You are the Trend Analysis Engine.

    Analyze the following data for topic: {topic}
    Time Range: {timeframe}

    Text Samples:
    {text_data}

    Detected Years: {years_str}

    Tasks:
      1. Identify key patterns or changes over time (increase, decline, cyclical, stable).
      2. Describe factors causing those changes.
      3. Predict short-term continuation or reversal of the trend.
      4. Output:
         - Trend Direction
         - Quantitative Pattern (if mentioned)
         - Main Drivers
         - Future Outlook
         - Concise Summary Paragraph
    """

    response = llm.invoke(prompt).content

    # --- Step 4: Basic confidence inference from textual cues ---
    conf_match = re.search(r"(\d\.\d+)", response)
    conf_score = float(conf_match.group(1)) if conf_match else 0.75

    return (
        f"ðŸ“ˆ Trend Analysis for '{topic}' ({timeframe})\n"
        f"Confidence â‰ˆ {conf_score:.2f}\n\n"
        f"{response.strip()}"
    )
