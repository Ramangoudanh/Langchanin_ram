from langchain_community.tools import tool
from langchain_openai import ChatOpenAI
import re

llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.2)

@tool("contradiction_detector", return_direct=True)
def contradiction_detector(claims: list[str]) -> str:
    """
    Detects contradictions or inconsistencies among multiple factual statements.

    Args:
        claims (list[str]): A list of 2–10 factual claims or summary statements.

    Returns:
        str: Analysis report with contradiction level and LLM reasoning.
    """
    if len(claims) < 2:
        return "Need at least two claims to compare."

    # Combine all claims into a structured prompt
    claims_text = "\n".join([f"{i+1}. {c}" for i, c in enumerate(claims)])

    prompt = f"""
    You are a factual consistency analyst.

    Analyze the following statements for agreement or contradiction:

    {claims_text}

    Tasks:
    1. Identify which statements agree and which conflict.
    2. Rate the overall contradiction level on a 0–1 scale
       (0 = perfectly consistent, 1 = highly contradictory).
    3. Provide concise reasoning and examples of conflicts if any.

    Return both a numeric contradiction score and your reasoning.
    """

    response = llm.invoke(prompt).content

    # Try to extract numeric score
    match = re.search(r"(\d\.\d+)", response)
    score = float(match.group(1)) if match else 0.5

    verdict = (
        "✅ Consistent" if score <= 0.3 else
        "⚠️ Partial Contradiction" if score <= 0.6 else
        "❌ Strong Contradiction"
    )

    return (
        f"🧾 Contradiction Analysis\n"
        f"Number of Claims: {len(claims)}\n"
        f"Score: {score:.2f}\n"
        f"Verdict: {verdict}\n\n"
        f"🤖 LLM Reasoning:\n{response.strip()}"
    )
