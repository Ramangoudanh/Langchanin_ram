@MCP.tool("report_structuring_tool")   # âœ… Register with MCP protocol
@tool("report_structuring_tool", return_direct=True)
def report_structuring_tool(validated_content: str, topic: str = "Research Report") -> str:
    """
    Converts validated research content into a structured, hierarchical report format.

    Args:
        validated_content (str): Fact-checked and analyzed data (output from Agent 4).
        topic (str): Report title or research theme.

    Returns:
        str: Formatted multi-section report outline (Markdown-style or JSON structure).
    """

    prompt = f"""
    You are the Report Structuring Engine.

    Your task is to take the validated research findings and organize them into a
    professional, academic-style report. Maintain clarity, hierarchy, and logical flow.

    Topic: {topic}

    Validated Research Content:
    {validated_content}

    ### Guidelines:
    - Use professional and academic tone.
    - Include the following sections (if relevant):
        1. Abstract
        2. Introduction
        3. Methodology or Approach
        4. Key Findings
        5. Comparative or Trend Analysis
        6. Discussion or Implications
        7. Conclusion
        8. References (placeholder)
    - Create a **structured Markdown or JSON-like format** that can be directly rendered as a report.
    - Ensure each section contains concise, evidence-backed statements.

    ### Output Format Example:
    {{
      "title": "...",
      "abstract": "...",
      "introduction": "...",
      "key_findings": ["...", "..."],
      "discussion": "...",
      "conclusion": "...",
      "references": ["..."]
    }}

    Now structure the report based on the provided content.
    """

    response = llm.invoke(prompt).content

    return (
        f"ðŸ§¾ **Structured Report for:** {topic}\n\n"
        f"{response.strip()}"
    )
