@MCP.tool("statistical_analysis_tool")          # <-- MCP registry
@tool("statistical_analysis_tool", return_direct=True)
def statistical_analysis_tool(topic: str, k: int = 5) -> str:
    """
    Extracts and summarizes numerical information (percentages, growth, ratios)
    from relevant documents to produce a quantitative insight summary.

    Args:
        topic (str): The subject or dataset to analyze statistically.
        k (int): Number of top retrieved docs.

    Returns:
        str: Statistical summary including key figures, averages, and insights.
    """

    # --- Step 1: Retrieve documents from vector DB ---
    docs = vector_store.similarity_search(topic, k=k)
    corpus = "\n".join([d.page_content[:600] for d in docs])

    # --- Step 2: Extract numeric values from text ---
    numbers = re.findall(r"\b\d+(?:\.\d+)?%?\b", corpus)
    clean_numbers = []
    for n in numbers:
        try:
            clean_numbers.append(float(n.replace("%", "")))
        except:
            continue

    # --- Step 3: Compute basic statistics (if enough numeric data) ---
    stats_summary = ""
    if clean_numbers:
        avg_val = statistics.mean(clean_numbers)
        med_val = statistics.median(clean_numbers)
        rng_val = max(clean_numbers) - min(clean_numbers)
        stats_summary = (
            f"Found {len(clean_numbers)} numeric values.\n"
            f"Average â‰ˆ {avg_val:.2f}\n"
            f"Median â‰ˆ {med_val:.2f}\n"
            f"Range â‰ˆ {rng_val:.2f}\n"
        )
    else:
        stats_summary = "No clear numeric patterns extracted from the dataset."

    # --- Step 4: LLM-driven interpretation ---
    prompt = f"""
    You are the Statistical Analysis Engine.

    Topic: {topic}

    Extracted numeric data:
    {stats_summary}

    Text corpus:
    {corpus}

    Tasks:
      1. Identify what these numbers represent (growth rate, count, ratio, etc.).
      2. Summarize quantitative trends or anomalies.
      3. Provide a short analytical paragraph explaining the statistical meaning.
      4. Estimate a confidence score (0â€“1).

    Output format:
      **Key Statistics:** ...
      **Interpretation:** ...
      **Summary:** ...
      **Confidence:** ...
    """

    response = llm.invoke(prompt).content

    # --- Step 5: Parse optional numeric confidence ---
    match = re.search(r"(\d\.\d+)", response)
    conf_score = float(match.group(1)) if match else 0.8

    return (
        f"ðŸ“Š Statistical Analysis for: '{topic}'\n"
        f"Confidence â‰ˆ {conf_score:.2f}\n\n"
        f"{response.strip()}"
    )
