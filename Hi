@tool("comparative_analysis_tool", return_direct=True)
def comparative_analysis_tool(query_a: str, query_b: str, k: int = 3) -> str:
    """
    Performs comparative analysis between two topics, datasets, or document sets.

    Steps:
      1. Retrieves top-k semantically related chunks for each query from PGVector.
      2. Summarizes each set separately.
      3. Uses LLM reasoning to highlight similarities, differences, and insights.

    Args:
        query_a (str): First concept/topic for comparison.
        query_b (str): Second concept/topic for comparison.
        k (int): Number of top documents to retrieve for each.

    Returns:
        str: Comparative summary (similarities, differences, key takeaways).
    """

    # --- Step 1: Retrieve evidence for each topic ---
    docs_a = vector_store.similarity_search(query_a, k=k)
    docs_b = vector_store.similarity_search(query_b, k=k)

    text_a = "\n".join([d.page_content[:400] for d in docs_a])
    text_b = "\n".join([d.page_content[:400] for d in docs_b])

    # --- Step 2: Comparative reasoning prompt ---
    prompt = f"""
    You are the Comparative Analysis Engine.

    Compare the following two knowledge sets and produce an analytical summary.

    --- Set A: {query_a} ---
    {text_a}

    --- Set B: {query_b} ---
    {text_b}

    Task:
      1. Identify core **similarities** (themes, facts, interpretations).
      2. Identify **differences or contradictions**.
      3. Highlight **contextual insights or implications**.
      4. Provide a concise **summary paragraph** synthesizing findings.

    Format your output clearly with sections:
    - Similarities
    - Differences
    - Insights
    - Summary
    """

    response = llm.invoke(prompt).content

    # --- Step 3: Optional confidence estimation from LLM output ---
    match = re.search(r"(\d\.\d+)", response)
    conf = float(match.group(1)) if match else 0.75

    return (
        f"üîç Comparative Analysis between:\nA = {query_a}\nB = {query_b}\n\n"
        f"Estimated Confidence: {conf:.2f}\n\n"
        f"{response.strip()}"
    )
