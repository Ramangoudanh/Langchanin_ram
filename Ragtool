from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_community.vectorstores.pgvector import PGVector
from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain.tools import tool

@tool("RagSearchTool", return_direct=True)
def vector_search(action: str, reminder: str = None) -> str:
    """
    Retrieves and summarizes context from stored documents using PGVector and LCEL (LangChain Expression Language).
    """

    # Step 1: Setup embeddings
    embeddings = OpenAIEmbeddings(model="text-embedding-3-small")

    # Step 2: Connect to PGVector store
    connection_string = "postgresql+psycopg://username:password@localhost:5432/vector_db"
    collection_name = "documents_collection"

    vector_store = PGVector(
        connection=connection_string,
        embeddings=embeddings,
        collection_name=collection_name,
        use_jsonb=True,
    )

    # Step 3: Create retriever
    retriever = vector_store.as_retriever(search_kwargs={"k": 3})

    # Step 4: Define LLM
    llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.2)

    # Step 5: Define the RAG prompt
    qa_prompt = ChatPromptTemplate.from_template(
        """You are a helpful assistant.
        Use the following context to answer the question.

        Context:
        {context}

        Question: {question}

        Give a short, factual, and clear answer."""
    )

    # Step 6: Build RAG pipeline using LCEL
    rag_chain = (
        {"context": retriever, "question": RunnablePassthrough()}
        | qa_prompt
        | llm
        | StrOutputParser()
    )

    # Step 7: Run the RAG process
    query = action if reminder is None else f"{action}. Additional context: {reminder}"
    response = rag_chain.invoke(query)

    return response
def safe_load_json(path):
    try:
        with open(path, "r") as f:
            data = json.load(f)
            if not isinstance(data, list):
                return []
            return data
    except (json.JSONDecodeError, FileNotFoundError):
        # if file empty or invalid JSON, reset it
        with open(path, "w") as f:
            json.dump([], f)
        return []

"""
    Manage reminders.  
    Use this tool to ADD, LIST, or DELETE reminders.

    Parameters:
    - action: One of ["add", "list", "delete"].
      Example: "add" to add a reminder, "list" to see all, "delete" to remove by text.
    - reminder: The reminder text (required for add/delete).
    
    Examples:
    - Add a reminder: action="add", reminder="Call mom at 5 PM"
    - List all reminders: action="list"
    - Delete a reminder: action="delete", reminder="Call mom"
    """
